# MRO--方法搜索顺序(了解)
# 概念
# --针对类提供了一个内置属性__mro__可以查看方法的搜索顺序
# --主要用户在多继承是判断方法，属性的调用方法
# --print(类名.mro)
# --如：输出结果为“(<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)”
#
# 整体逻辑
# --子类在使用方法时，是按照__mro__的输出结果 从左至右 的顺序查找的
# --如果当前类中 找到方法，就直接执行，不再搜索
# --如果没有找到，就查找下一个类，看是否有对应的方法，如果找到就直接执行，不再搜索
# --如果找到最后一个类，还没有找到方法，程序报错


class A(object):

    def a(self):

        print('这是父类A的一个方法')


class B(object):
    # 和A类具有同名的方法a
    def a(self):

        print('这是父类B的一个方法')


# 子类具有多个父类时，在括号中都写入即可
class C(A, B):

    def c(self):
        print('这是子类C自己的方法')


c = C()
# 使用该方法可以查看C类继承时，调用父类的顺序，
# 输出结果为“(<class '__main__.C'>, <class '__main__.A'>, <class '__main__.B'>, <class 'object'>)”
print(C.__mro__)
# 从上方输出结果可知，先执行A类的方法，因此同名方法输出为A的内容
# 调用同名方法，输出结果为“这是父类A的一个方法”
c.a()
c.c()
